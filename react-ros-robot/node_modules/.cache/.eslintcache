[{"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js":"1","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js":"2","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js":"3","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx":"4","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx":"5","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx":"6","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx":"7","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx":"8","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx":"9","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js":"10","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx":"11","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx":"12","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/nav2d.js":"13","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/ros2d.js":"14","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Map.jsx":"15","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Navigation.jsx":"16","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RelayControl.jsx":"17","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/ros2d/src/Ros2D.js":"18"},{"size":544,"mtime":1620506910528,"results":"19","hashOfConfig":"20"},{"size":271,"mtime":1620141134475,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1619338743456,"results":"22","hashOfConfig":"20"},{"size":690,"mtime":1620745563891,"results":"23","hashOfConfig":"20"},{"size":702,"mtime":1620745563891,"results":"24","hashOfConfig":"20"},{"size":303,"mtime":1620143415564,"results":"25","hashOfConfig":"20"},{"size":1100,"mtime":1620506910528,"results":"26","hashOfConfig":"20"},{"size":685,"mtime":1620764625330,"results":"27","hashOfConfig":"20"},{"size":1820,"mtime":1619463111539,"results":"28","hashOfConfig":"20"},{"size":279,"mtime":1620485711229,"results":"29","hashOfConfig":"20"},{"size":3006,"mtime":1620485711229,"results":"30","hashOfConfig":"20"},{"size":4052,"mtime":1620485711229,"results":"31","hashOfConfig":"20"},{"size":12864,"mtime":1620529558092,"results":"32","hashOfConfig":"33"},{"size":36037,"mtime":1620528689302,"results":"34","hashOfConfig":"33"},{"size":962,"mtime":1620808545485,"results":"35","hashOfConfig":"20"},{"size":2907,"mtime":1620813223217,"results":"36","hashOfConfig":"20"},{"size":9539,"mtime":1620763578582,"results":"37","hashOfConfig":"20"},{"size":1203,"mtime":1620812747585,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1htp6q6",{"filePath":"41","messages":"42","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":36,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"t0ojb2",{"filePath":"71","messages":"72","errorCount":75,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js",["87","88","89","90"],"import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Body from \"./components/Body\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body></Body>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx",["91"],"import React, { Component } from \"react\";\nimport {Container, Navbar, Nav, TabContainer} from \"react-bootstrap\";\n\nclass Header extends Component {\n  render() {\n    return ( \n    <Container>\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n    <Navbar.Brand href=\"#home\">Ros Web Interface</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"/\">Home</Nav.Link>\n        <Nav.Link href=\"/Map\">Map</Nav.Link>\n        <Nav.Link href=\"/About\">About</Nav.Link>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n  </Container>\n  \n   );\n  }\n}\n\nexport default Header;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx",["92"],"import React, {Component} from \"react\";\nimport Connection from \"./Connection\";\nimport Teleoperation from \"./Teleoperation\";\nimport RobotState from \"./RobotState\"\nimport {Row, Col, Container, Button} from \"react-bootstrap\"\n\nclass Home extends Component {\n    state = {\n        \n    };\n    render(){\n        return (\n        <div> \n            <Container>\n                <h1 className=\"text-center mt-3\">  Robot Control Page</h1>\n                <Row>\n                    <Col>\n                        <Connection />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Teleoperation />\n                    </Col>\n                    <Col>\n                        <h1>MAP</h1>\n                        <p>This region will be used later for displaying a map</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <RobotState />\n                    </Col>\n                </Row>\n            </Container> \n\n        </div>\n        );\n    }\n\n}\n\nexport default Home;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx",["93","94"],"import { thisExpression } from '@babel/types';\nimport React, {Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\n\nclass Connection extends Component {\n    state = {\n        connected: false,\n        ros: null\n    }\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n\n\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <Alert className=\"text-center m-3\" variant={this.state.connected ? \"success\": \"danger\"}>\n                    {this.state.connected? \"Robot connected\" : \"Robot disconnected\"}\n                </Alert>\n                \n            </div>\n        );\n    }\n  \n}\n\nexport default Connection;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx",["95"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from '../scripts/config';\n\n\nclass Teleoperation extends Component {\n\n    state = { ros: null };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleMove(event) {\n        console.log(\"hanle move\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    handleStop(event) {\n        console.log(\"hanle stop\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    render() {\n        return <div>\n            <Joystick\n                size={100}\n                baseColor=\"black\"\n                stickColor=\"orange\"\n                move={this.handleMove}\n                stop={this.handleStop}\n            ></Joystick>\n        </div>;\n    }\n}\n\nexport default Teleoperation;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx",["96","97","98"],"import React, { Component } from \"react\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\"\nimport Config from '../scripts/config';\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        orientation:0,\n        linear:0,\n        angular:0,\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    };\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    componentDidMount(){\n        this.getRobotState();\n    }\n\n    getRobotState(){\n        // pose subscriber\n        var pos_sub = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.POSE_TOPIC,\n            messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n            \n        });\n\n        // pose callback\n        pos_sub.subscribe((message)=>{\n            this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n            this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n            this.setState({ orientation: this.getOrientationFromQuaternion(\n                message.pose.pose.orientation\n                ).toFixed(2), \n            });\n        });\n\n        // subscribe for velocity in odom\n        var vel_sub = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.ODOM_TOPIC,\n            messageType: \"nav_msgs/Odometry\",\n            \n        });\n\n        // vel callback\n        vel_sub.subscribe((message)=>{\n            this.setState({ linear: message.twist.twist.linear.x.toFixed(2) });\n            this.setState({ angular: message.twist.twist.angular.z.toFixed(2) });\n        });\n    }\n\n    getOrientationFromQuaternion(ros_orientation_quaterternion){\n        var q = new Three.Quaternion(\n                ros_orientation_quaterternion.x, \n                ros_orientation_quaterternion.y, \n                ros_orientation_quaterternion.z, \n                ros_orientation_quaterternion.w\n        );\n            // convert roll pitch yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"] + (180 / Math.PI);\n    }\n\n    render() {\n        return(\n            <div>\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\"> Position:</h4>\n                        <p className=\"mt-0\">x: {this.state.x}</p>\n                        <p className=\"mt-0\">y: {this.state.y}</p>\n                        <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\"> Velocities</h4>\n                        <p className=\"mt-0\">Linear: {this.state.linear}</p>\n                        <p className=\"mt-0\">Angular: {this.state.angular}</p>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default RobotState;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/nav2d.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143"],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/ros2d.js",["144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar ROS2D = ROS2D || {\n  REVISION: \"0.9.0\",\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function (x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x: rosX,\n    y: rosY,\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function (pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x: x,\n    y: y,\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function (orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return (\n    (-Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) *\n      180.0) /\n    Math.PI\n  );\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid map meta data message\n *   * image - the image URL to load\n */\nROS2D.ImageMap = function (options) {\n  options = options || {};\n  var message = options.message;\n  var image = options.image;\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.origin.position,\n    orientation: message.origin.orientation,\n  });\n\n  // set the size\n  this.width = message.width;\n  this.height = message.height;\n\n  // create the bitmap\n  createjs.Bitmap.call(this, image);\n  // change Y direction\n  this.y = -this.height * message.resolution;\n\n  // scale the image\n  this.scaleX = message.resolution;\n  this.scaleY = message.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.ImageMap.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A image map is a PNG image scaled to fit to the dimensions of a OccupancyGrid.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map meta data topic to listen to\n *   * image - the image URL to load\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.ImageMapClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map_metadata\";\n  this.image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // create an empty shape to start with\n  this.currentImage = new createjs.Shape();\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/MapMetaData\",\n  });\n\n  rosTopic.subscribe(function (message) {\n    // we only need this once\n    rosTopic.unsubscribe();\n\n    // create the image\n    that.currentImage = new ROS2D.ImageMap({\n      message: message,\n      image: that.image,\n    });\n    that.rootObject.addChild(that.currentImage);\n    // work-around for a bug in easeljs -- needs a second object to render correctly\n    that.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n    that.emit(\"change\");\n  });\n};\nROS2D.ImageMapClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * An OccupancyGrid can convert a ROS occupancy grid message into a createjs Bitmap object.\n *\n * @constructor\n * @param options - object with following keys:\n *   * message - the occupancy grid message\n */\nROS2D.OccupancyGrid = function (options) {\n  options = options || {};\n  var message = options.message;\n\n  // internal drawing canvas\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n\n  // save the metadata we need\n  this.pose = new ROSLIB.Pose({\n    position: message.info.origin.position,\n    orientation: message.info.origin.orientation,\n  });\n\n  // set the size\n  this.width = message.info.width;\n  this.height = message.info.height;\n  canvas.width = this.width;\n  canvas.height = this.height;\n\n  var imageData = context.createImageData(this.width, this.height);\n  for (var row = 0; row < this.height; row++) {\n    for (var col = 0; col < this.width; col++) {\n      // determine the index into the map data\n      var mapI = col + (this.height - row - 1) * this.width;\n      // determine the value\n      var data = message.data[mapI];\n      var val;\n      if (data === 100) {\n        val = 0;\n      } else if (data === 0) {\n        val = 255;\n      } else {\n        val = 127;\n      }\n\n      // determine the index into the image data array\n      var i = (col + row * this.width) * 4;\n      // r\n      imageData.data[i] = val;\n      // g\n      imageData.data[++i] = val;\n      // b\n      imageData.data[++i] = val;\n      // a\n      imageData.data[++i] = 255;\n    }\n  }\n  context.putImageData(imageData, 0, 0);\n\n  // create the bitmap\n  createjs.Bitmap.call(this, canvas);\n  // change Y direction\n  this.y = -this.height * message.info.resolution;\n\n  // scale the image\n  this.scaleX = message.info.resolution;\n  this.scaleY = message.info.resolution;\n  this.width *= this.scaleX;\n  this.height *= this.scaleY;\n\n  // set the pose\n  this.x += this.pose.position.x;\n  this.y -= this.pose.position.y;\n};\nROS2D.OccupancyGrid.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A map that listens to a given occupancy grid topic.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * topic (optional) - the map topic to listen to\n *   * rootObject (optional) - the root object to add this marker to\n *   * continuous (optional) - if the map should be continuously loaded (e.g., for SLAM)\n */\nROS2D.OccupancyGridClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var topic = options.topic || \"/map\";\n  this.continuous = options.continuous;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  // create an empty shape to start with, so that the order remains correct.\n  this.currentGrid = new createjs.Shape();\n  this.rootObject.addChild(this.currentGrid);\n  // work-around for a bug in easeljs -- needs a second object to render correctly\n  this.rootObject.addChild(new ROS2D.Grid({ size: 1 }));\n\n  // subscribe to the topic\n  var rosTopic = new ROSLIB.Topic({\n    ros: ros,\n    name: topic,\n    messageType: \"nav_msgs/OccupancyGrid\",\n    compression: \"png\",\n  });\n\n  rosTopic.subscribe(function (message) {\n    // check for an old map\n    var index = null;\n    if (that.currentGrid) {\n      index = that.rootObject.getChildIndex(that.currentGrid);\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: message,\n    });\n    if (index !== null) {\n      that.rootObject.addChildAt(that.currentGrid, index);\n    } else {\n      that.rootObject.addChild(that.currentGrid);\n    }\n\n    that.emit(\"change\");\n\n    // check if we should unsubscribe\n    if (!that.continuous) {\n      rosTopic.unsubscribe();\n    }\n  });\n};\nROS2D.OccupancyGridClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Jihoon Lee- jihoonlee.in@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A static map that receives from map_server.\n *\n * Emits the following events:\n *   * 'change' - there was an update or change in the map\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * service (optional) - the map topic to listen to, like '/static_map'\n *   * rootObject (optional) - the root object to add this marker to\n */\nROS2D.OccupancyGridSrvClient = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var service = options.service || \"/static_map\";\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  // current grid that is displayed\n  this.currentGrid = null;\n\n  // Setting up to the service\n  var rosService = new ROSLIB.Service({\n    ros: ros,\n    name: service,\n    serviceType: \"nav_msgs/GetMap\",\n    compression: \"png\",\n  });\n\n  rosService.callService(new ROSLIB.ServiceRequest(), function (response) {\n    // check for an old map\n    if (that.currentGrid) {\n      that.rootObject.removeChild(that.currentGrid);\n    }\n\n    that.currentGrid = new ROS2D.OccupancyGrid({\n      message: response.map,\n    });\n    that.rootObject.addChild(that.currentGrid);\n\n    that.emit(\"change\", that.currentGrid);\n  });\n};\nROS2D.OccupancyGridSrvClient.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * An arrow with line and triangular head, based on the navigation arrow.\n * Aims to the left at 0 rotation, as would be expected.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.ArrowShape = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n\n  var headLen = size / 3.0;\n  var headWidth = (headLen * 2.0) / 3.0;\n\n  graphics.setStrokeStyle(strokeSize);\n  graphics.beginStroke(strokeColor);\n  graphics.moveTo(0, 0);\n  graphics.lineTo(size - headLen, 0);\n\n  graphics.beginFill(fillColor);\n  graphics.moveTo(size, 0);\n  graphics.lineTo(size - headLen, headWidth / 2.0);\n  graphics.lineTo(size - headLen, -headWidth / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.ArrowShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A Grid object draw in map.\n *\n * @constructor\n * @param options - object with following keys:\n *  * size (optional) - the size of the grid\n *  * cellSize (optional) - the cell size of map\n *  * lineWidth (optional) - the width of the lines in the grid\n */\nROS2D.Grid = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var cellSize = options.cellSize || 0.1;\n  var lineWidth = options.lineWidth || 0.001;\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(lineWidth * 5);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  graphics.moveTo(-size * cellSize, 0);\n  graphics.lineTo(size * cellSize, 0);\n  graphics.moveTo(0, -size * cellSize);\n  graphics.lineTo(0, size * cellSize);\n  graphics.endFill();\n  graphics.endStroke();\n\n  graphics.setStrokeStyle(lineWidth);\n  graphics.beginStroke(createjs.Graphics.getRGB(0, 0, 0));\n  graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));\n  for (var i = -size; i <= size; i++) {\n    graphics.moveTo(-size * cellSize, i * cellSize);\n    graphics.lineTo(size * cellSize, i * cellSize);\n    graphics.moveTo(i * cellSize, -size * cellSize);\n    graphics.lineTo(i * cellSize, size * cellSize);\n  }\n  graphics.endFill();\n  graphics.endStroke();\n  // create the shape\n  createjs.Shape.call(this, graphics);\n};\nROS2D.Grid.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A navigation arrow is a directed triangle that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * fillColor (optional) - the createjs color for the fill\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationArrow = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var strokeSize = options.strokeSize || 3;\n  var strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  var fillColor = options.fillColor || createjs.Graphics.getRGB(255, 0, 0);\n  var pulse = options.pulse;\n\n  // draw the arrow\n  var graphics = new createjs.Graphics();\n  // line width\n  graphics.setStrokeStyle(strokeSize);\n  graphics.moveTo(-size / 2.0, -size / 2.0);\n  graphics.beginStroke(strokeColor);\n  graphics.beginFill(fillColor);\n  graphics.lineTo(size, 0);\n  graphics.lineTo(-size / 2.0, size / 2.0);\n  graphics.closePath();\n  graphics.endFill();\n  graphics.endStroke();\n\n  // create the shape\n  createjs.Shape.call(this, graphics);\n\n  // check if we are pulsing\n  if (pulse) {\n    // have the model \"pulse\"\n    var growCount = 0;\n    var growing = true;\n    createjs.Ticker.addEventListener(\"tick\", function () {\n      if (growing) {\n        that.scaleX *= 1.035;\n        that.scaleY *= 1.035;\n        growing = ++growCount < 10;\n      } else {\n        that.scaleX /= 1.035;\n        that.scaleY /= 1.035;\n        growing = --growCount < 0;\n      }\n    });\n  }\n};\nROS2D.NavigationArrow.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Inigo Gonzalez - ingonza85@gmail.com\n */\n\n/**\n * A navigation image that can be used to display orientation.\n *\n * @constructor\n * @param options - object with following keys:\n *   * size (optional) - the size of the marker\n *   * image - the image to use as a marker\n *   * pulse (optional) - if the marker should \"pulse\" over time\n */\nROS2D.NavigationImage = function (options) {\n  var that = this;\n  options = options || {};\n  var size = options.size || 10;\n  var image_url = options.image;\n  var pulse = options.pulse;\n  var alpha = options.alpha || 1;\n\n  var originals = {};\n\n  var paintImage = function () {\n    createjs.Bitmap.call(that, image);\n    var scale = calculateScale(size);\n    that.alpha = alpha;\n    that.scaleX = scale;\n    that.scaleY = scale;\n    that.regY = that.image.height / 2;\n    that.regX = that.image.width / 2;\n    originals[\"rotation\"] = that.rotation;\n    Object.defineProperty(that, \"rotation\", {\n      get: function () {\n        return originals[\"rotation\"] + 90;\n      },\n      set: function (value) {\n        originals[\"rotation\"] = value;\n      },\n    });\n    if (pulse) {\n      // have the model \"pulse\"\n      var growCount = 0;\n      var growing = true;\n      var SCALE_SIZE = 1.02;\n      createjs.Ticker.addEventListener(\"tick\", function () {\n        if (growing) {\n          that.scaleX *= SCALE_SIZE;\n          that.scaleY *= SCALE_SIZE;\n          growing = ++growCount < 10;\n        } else {\n          that.scaleX /= SCALE_SIZE;\n          that.scaleY /= SCALE_SIZE;\n          growing = --growCount < 0;\n        }\n      });\n    }\n  };\n\n  var calculateScale = function (_size) {\n    return _size / image.width;\n  };\n\n  var image = new Image();\n  image.onload = paintImage;\n  image.src = image_url;\n};\n\nROS2D.NavigationImage.prototype.__proto__ = createjs.Bitmap.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A shape to draw a nav_msgs/Path msg\n *\n * @constructor\n * @param options - object with following keys:\n *   * path (optional) - the initial path to draw\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n */\nROS2D.PathShape = function (options) {\n  options = options || {};\n  var path = options.path;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n\n  // draw the line\n  this.graphics = new createjs.Graphics();\n\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(\n      path.poses[0].pose.position.x / this.scaleX,\n      path.poses[0].pose.position.y / -this.scaleY\n    );\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(\n        path.poses[i].pose.position.x / this.scaleX,\n        path.poses[i].pose.position.y / -this.scaleY\n      );\n    }\n    this.graphics.endStroke();\n  }\n\n  // create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Set the path to draw\n *\n * @param path of type nav_msgs/Path\n */\nROS2D.PathShape.prototype.setPath = function (path) {\n  this.graphics.clear();\n  if (path !== null && typeof path !== \"undefined\") {\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.moveTo(\n      path.poses[0].pose.position.x / this.scaleX,\n      path.poses[0].pose.position.y / -this.scaleY\n    );\n    for (var i = 1; i < path.poses.length; ++i) {\n      this.graphics.lineTo(\n        path.poses[i].pose.position.x / this.scaleX,\n        path.poses[i].pose.position.y / -this.scaleY\n      );\n    }\n    this.graphics.endStroke();\n  }\n};\n\nROS2D.PathShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A polygon that can be edited by an end user\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * lineSize (optional) - the width of the lines\n *   * lineColor (optional) - the createjs color of the lines\n *   * pointSize (optional) - the size of the points\n *   * pointColor (optional) - the createjs color of the points\n *   * fillColor (optional) - the createjs color to fill the polygon\n *   * lineCallBack (optional) - callback function for mouse interaction with a line\n *   * pointCallBack (optional) - callback function for mouse interaction with a point\n */\nROS2D.PolygonMarker = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  this.lineSize = options.lineSize || 3;\n  this.lineColor =\n    options.lineColor || createjs.Graphics.getRGB(0, 0, 255, 0.66);\n  this.pointSize = options.pointSize || 10;\n  this.pointColor =\n    options.pointColor || createjs.Graphics.getRGB(255, 0, 0, 0.66);\n  this.fillColor =\n    options.pointColor || createjs.Graphics.getRGB(0, 255, 0, 0.33);\n  this.lineCallBack = options.lineCallBack;\n  this.pointCallBack = options.pointCallBack;\n\n  // Array of point shapes\n  //\tthis.points = [];\n  this.pointContainer = new createjs.Container();\n\n  // Array of line shapes\n  //\tthis.lines = [];\n  this.lineContainer = new createjs.Container();\n\n  this.fillShape = new createjs.Shape();\n\n  // Container with all the lines and points\n  createjs.Container.call(this);\n\n  this.addChild(this.fillShape);\n  this.addChild(this.lineContainer);\n  this.addChild(this.pointContainer);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createLineShape = function (\n  startPoint,\n  endPoint\n) {\n  var line = new createjs.Shape();\n  //\tline.graphics.setStrokeStyle(this.strokeSize);\n  //\tline.graphics.beginStroke(this.strokeColor);\n  //\tline.graphics.moveTo(startPoint.x, startPoint.y);\n  //\tline.graphics.lineTo(endPoint.x, endPoint.y);\n  this.editLineShape(line, startPoint, endPoint);\n\n  var that = this;\n  line.addEventListener(\"mousedown\", function (event) {\n    if (\n      that.lineCallBack !== null &&\n      typeof that.lineCallBack !== \"undefined\"\n    ) {\n      that.lineCallBack(\n        \"mousedown\",\n        event,\n        that.lineContainer.getChildIndex(event.target)\n      );\n    }\n  });\n\n  return line;\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.editLineShape = function (\n  line,\n  startPoint,\n  endPoint\n) {\n  line.graphics.clear();\n  line.graphics.setStrokeStyle(this.lineSize);\n  line.graphics.beginStroke(this.lineColor);\n  line.graphics.moveTo(startPoint.x, startPoint.y);\n  line.graphics.lineTo(endPoint.x, endPoint.y);\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.createPointShape = function (pos) {\n  var point = new createjs.Shape();\n  point.graphics.beginFill(this.pointColor);\n  point.graphics.drawCircle(0, 0, this.pointSize);\n  point.x = pos.x;\n  point.y = -pos.y;\n\n  var that = this;\n  point.addEventListener(\"mousedown\", function (event) {\n    if (\n      that.pointCallBack !== null &&\n      typeof that.pointCallBack !== \"undefined\"\n    ) {\n      that.pointCallBack(\n        \"mousedown\",\n        event,\n        that.pointContainer.getChildIndex(event.target)\n      );\n    }\n  });\n\n  return point;\n};\n\n/**\n * Adds a point to the polygon\n *\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.addPoint = function (pos) {\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChild(point);\n  var numPoints = this.pointContainer.getNumChildren();\n\n  // 0 points -> 1 point, 0 lines\n  // 1 point  -> 2 points, lines: add line between previous and new point, add line between new point and first point\n  // 2 points -> 3 points, 3 lines: change last line, add line between new point and first point\n  // 3 points -> 4 points, 4 lines: change last line, add line between new point and first point\n  // etc\n\n  if (numPoints < 2) {\n    // Now 1 point\n  } else if (numPoints < 3) {\n    // Now 2 points: add line between previous and new point\n    var line = this.createLineShape(\n      this.pointContainer.getChildAt(numPoints - 2),\n      point\n    );\n    this.lineContainer.addChild(line);\n  }\n  if (numPoints > 2) {\n    // Now 3 or more points: change last line\n    this.editLineShape(\n      this.lineContainer.getChildAt(numPoints - 2),\n      this.pointContainer.getChildAt(numPoints - 2),\n      point\n    );\n  }\n  if (numPoints > 1) {\n    // Now 2 or more points: add line between new point and first point\n    var lineEnd = this.createLineShape(\n      point,\n      this.pointContainer.getChildAt(0)\n    );\n    this.lineContainer.addChild(lineEnd);\n  }\n\n  this.drawFill();\n};\n\n/**\n * Removes a point from the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n */\nROS2D.PolygonMarker.prototype.remPoint = function (obj) {\n  var index;\n  //\tvar point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    //\t\tpoint = obj;\n  } else {\n    index = obj;\n    //\t\tpoint = this.pointContainer.getChildAt(index);\n  }\n\n  // 0 points -> 0 points, 0 lines\n  // 1 point  -> 0 points, 0 lines\n  // 2 points -> 1 point,  0 lines: remove all lines\n  // 3 points -> 2 points, 2 lines: change line before point to remove, remove line after point to remove\n  // 4 points -> 3 points, 3 lines: change line before point to remove, remove line after point to remove\n  // etc\n\n  var numPoints = this.pointContainer.getNumChildren();\n\n  if (numPoints < 2) {\n  } else if (numPoints < 3) {\n    // 2 points: remove all lines\n    this.lineContainer.removeAllChildren();\n  } else {\n    // 3 or more points: change line before point to remove, remove line after point to remove\n    this.editLineShape(\n      this.lineContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      this.pointContainer.getChildAt((index + 1) % numPoints)\n    );\n    this.lineContainer.removeChildAt(index);\n  }\n  this.pointContainer.removeChildAt(index);\n  //\tthis.points.splice(index, 1);\n\n  this.drawFill();\n};\n\n/**\n * Moves a point of the polygon\n *\n * @param obj either an index (integer) or a point shape of the polygon\n * @param position of type ROSLIB.Vector3\n */\nROS2D.PolygonMarker.prototype.movePoint = function (obj, newPos) {\n  var index;\n  var point;\n  if (obj instanceof createjs.Shape) {\n    index = this.pointContainer.getChildIndex(obj);\n    point = obj;\n  } else {\n    index = obj;\n    point = this.pointContainer.getChildAt(index);\n  }\n  point.x = newPos.x;\n  point.y = -newPos.y;\n\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 1) {\n    // line before moved point\n    var line1 = this.lineContainer.getChildAt(\n      (index - 1 + numPoints) % numPoints\n    );\n    this.editLineShape(\n      line1,\n      this.pointContainer.getChildAt((index - 1 + numPoints) % numPoints),\n      point\n    );\n\n    // line after moved point\n    var line2 = this.lineContainer.getChildAt(index);\n    this.editLineShape(\n      line2,\n      point,\n      this.pointContainer.getChildAt((index + 1) % numPoints)\n    );\n  }\n\n  this.drawFill();\n};\n\n/**\n * Splits a line of the polygon: inserts a point at the center of the line\n *\n * @param obj either an index (integer) or a line shape of the polygon\n */\nROS2D.PolygonMarker.prototype.splitLine = function (obj) {\n  var index;\n  var line;\n  if (obj instanceof createjs.Shape) {\n    index = this.lineContainer.getChildIndex(obj);\n    line = obj;\n  } else {\n    index = obj;\n    line = this.lineContainer.getChildAt(index);\n  }\n  var numPoints = this.pointContainer.getNumChildren();\n  var xs = this.pointContainer.getChildAt(index).x;\n  var ys = this.pointContainer.getChildAt(index).y;\n  var xe = this.pointContainer.getChildAt((index + 1) % numPoints).x;\n  var ye = this.pointContainer.getChildAt((index + 1) % numPoints).y;\n  var xh = (xs + xe) / 2.0;\n  var yh = (ys + ye) / 2.0;\n  var pos = new ROSLIB.Vector3({ x: xh, y: -yh });\n\n  // Add a point in the center of the line to split\n  var point = this.createPointShape(pos);\n  this.pointContainer.addChildAt(point, index + 1);\n  ++numPoints;\n\n  // Add a line between the new point and the end of the line to split\n  var lineNew = this.createLineShape(\n    point,\n    this.pointContainer.getChildAt((index + 2) % numPoints)\n  );\n  this.lineContainer.addChildAt(lineNew, index + 1);\n\n  // Set the endpoint of the line to split to the new point\n  this.editLineShape(line, this.pointContainer.getChildAt(index), point);\n\n  this.drawFill();\n};\n\n/**\n * Internal use only\n */\nROS2D.PolygonMarker.prototype.drawFill = function () {\n  var numPoints = this.pointContainer.getNumChildren();\n  if (numPoints > 2) {\n    var g = this.fillShape.graphics;\n    g.clear();\n    g.setStrokeStyle(0);\n    g.moveTo(\n      this.pointContainer.getChildAt(0).x,\n      this.pointContainer.getChildAt(0).y\n    );\n    g.beginStroke();\n    g.beginFill(this.fillColor);\n    for (var i = 1; i < numPoints; ++i) {\n      g.lineTo(\n        this.pointContainer.getChildAt(i).x,\n        this.pointContainer.getChildAt(i).y\n      );\n    }\n    g.closePath();\n    g.endFill();\n    g.endStroke();\n  } else {\n    this.fillShape.graphics.clear();\n  }\n};\n\nROS2D.PolygonMarker.prototype.__proto__ = createjs.Container.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * A trace of poses, handy to see where a robot has been\n *\n * @constructor\n * @param options - object with following keys:\n *   * pose (optional) - the first pose of the trace\n *   * strokeSize (optional) - the size of the outline\n *   * strokeColor (optional) - the createjs color for the stroke\n *   * maxPoses (optional) - the maximum number of poses to keep, 0 for infinite\n *   * minDist (optional) - the minimal distance between poses to use the pose for drawing (default 0.05)\n */\nROS2D.TraceShape = function (options) {\n  //\tvar that = this;\n  options = options || {};\n  var pose = options.pose;\n  this.strokeSize = options.strokeSize || 3;\n  this.strokeColor = options.strokeColor || createjs.Graphics.getRGB(0, 0, 0);\n  this.maxPoses = options.maxPoses || 100;\n  this.minDist = options.minDist || 0.05;\n\n  // Store minDist as the square of it\n  this.minDist = this.minDist * this.minDist;\n\n  // Array of the poses\n  // TODO: do we need this?\n  this.poses = [];\n\n  // Create the graphics\n  this.graphics = new createjs.Graphics();\n  this.graphics.setStrokeStyle(this.strokeSize);\n  this.graphics.beginStroke(this.strokeColor);\n\n  // Add first pose if given\n  if (pose !== null && typeof pose !== \"undefined\") {\n    this.poses.push(pose);\n  }\n\n  // Create the shape\n  createjs.Shape.call(this, this.graphics);\n};\n\n/**\n * Adds a pose to the trace and updates the graphics\n *\n * @param pose of type ROSLIB.Pose\n */\nROS2D.TraceShape.prototype.addPose = function (pose) {\n  var last = this.poses.length - 1;\n  if (last < 0) {\n    this.poses.push(pose);\n    this.graphics.moveTo(\n      pose.position.x / this.scaleX,\n      pose.position.y / -this.scaleY\n    );\n  } else {\n    var prevX = this.poses[last].position.x;\n    var prevY = this.poses[last].position.y;\n    var dx = pose.position.x - prevX;\n    var dy = pose.position.y - prevY;\n    if (dx * dx + dy * dy > this.minDist) {\n      this.graphics.lineTo(\n        pose.position.x / this.scaleX,\n        pose.position.y / -this.scaleY\n      );\n      this.poses.push(pose);\n    }\n  }\n  if (this.maxPoses > 0 && this.maxPoses < this.poses.length) {\n    this.popFront();\n  }\n};\n\n/**\n * Removes front pose and updates the graphics\n */\nROS2D.TraceShape.prototype.popFront = function () {\n  if (this.poses.length > 0) {\n    this.poses.shift();\n    // TODO: shift drawing instructions rather than doing it all over\n    this.graphics.clear();\n    this.graphics.setStrokeStyle(this.strokeSize);\n    this.graphics.beginStroke(this.strokeColor);\n    this.graphics.lineTo(\n      this.poses[0].position.x / this.scaleX,\n      this.poses[0].position.y / -this.scaleY\n    );\n    for (var i = 1; i < this.poses.length; ++i) {\n      this.graphics.lineTo(\n        this.poses[i].position.x / this.scaleX,\n        this.poses[i].position.y / -this.scaleY\n      );\n    }\n  }\n};\n\nROS2D.TraceShape.prototype.__proto__ = createjs.Shape.prototype;\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds panning to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply panning to\n */\nROS2D.PanView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.startPos = new ROSLIB.Vector3();\n};\n\nROS2D.PanView.prototype.startPan = function (startX, startY) {\n  this.startPos.x = startX;\n  this.startPos.y = startY;\n};\n\nROS2D.PanView.prototype.pan = function (curX, curY) {\n  this.stage.x += curX - this.startPos.x;\n  this.startPos.x = curX;\n  this.stage.y += curY - this.startPos.y;\n  this.startPos.y = curY;\n};\n\n/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A Viewer can be used to render an interactive 2D scene to a HTML5 canvas.\n *\n * @constructor\n * @param options - object with following keys:\n *   * divID - the ID of the div to place the viewer in\n *   * width - the initial width, in pixels, of the canvas\n *   * height - the initial height, in pixels, of the canvas\n *   * background (optional) - the color to render the background, like '#efefef'\n */\nROS2D.Viewer = function (options) {\n  var that = this;\n  options = options || {};\n  var divID = options.divID;\n  this.width = options.width;\n  this.height = options.height;\n  var background = options.background || \"#111111\";\n\n  // create the canvas to render to\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = this.width;\n  canvas.height = this.height;\n  canvas.style.background = background;\n  document.getElementById(divID).appendChild(canvas);\n  // create the easel to use\n  this.scene = new createjs.Stage(canvas);\n\n  // change Y axis center\n  this.scene.y = this.height;\n\n  // add the renderer to the page\n  document.getElementById(divID).appendChild(canvas);\n\n  // update at 30fps\n  createjs.Ticker.setFPS(30);\n  createjs.Ticker.addEventListener(\"tick\", this.scene);\n};\n\n/**\n * Add the given createjs object to the global scene in the viewer.\n *\n * @param object - the object to add\n */\nROS2D.Viewer.prototype.addObject = function (object) {\n  this.scene.addChild(object);\n};\n\n/**\n * Scale the scene to fit the given width and height into the current canvas.\n *\n * @param width - the width to scale to in meters\n * @param height - the height to scale to in meters\n */\nROS2D.Viewer.prototype.scaleToDimensions = function (width, height) {\n  // restore to values before shifting, if ocurred\n  this.scene.x =\n    typeof this.scene.x_prev_shift !== \"undefined\"\n      ? this.scene.x_prev_shift\n      : this.scene.x;\n  this.scene.y =\n    typeof this.scene.y_prev_shift !== \"undefined\"\n      ? this.scene.y_prev_shift\n      : this.scene.y;\n\n  // save scene scaling\n  this.scene.scaleX = this.width / width;\n  this.scene.scaleY = this.height / height;\n};\n\n/**\n * Shift the main view of the canvas by the given amount. This is based on the\n * ROS coordinate system. That is, Y is opposite that of a traditional canvas.\n *\n * @param x - the amount to shift by in the x direction in meters\n * @param y - the amount to shift by in the y direction in meters\n */\nROS2D.Viewer.prototype.shift = function (x, y) {\n  // save current offset\n  this.scene.x_prev_shift = this.scene.x;\n  this.scene.y_prev_shift = this.scene.y;\n\n  // shift scene by scaling the desired offset\n  this.scene.x -= x * this.scene.scaleX;\n  this.scene.y += y * this.scene.scaleY;\n};\n\n/**\n * @author Bart van Vliet - bart@dobots.nl\n */\n\n/**\n * Adds zooming to a view\n *\n * @constructor\n * @param options - object with following keys:\n *   * rootObject (optional) - the root object to apply zoom to\n *   * minScale (optional) - minimum scale to set to preserve precision\n */\nROS2D.ZoomView = function (options) {\n  options = options || {};\n  this.rootObject = options.rootObject;\n  this.minScale = options.minScale || 0.001;\n\n  // get a handle to the stage\n  if (this.rootObject instanceof createjs.Stage) {\n    this.stage = this.rootObject;\n  } else {\n    this.stage = this.rootObject.getStage();\n  }\n\n  this.center = new ROSLIB.Vector3();\n  this.startShift = new ROSLIB.Vector3();\n  this.startScale = new ROSLIB.Vector3();\n};\n\nROS2D.ZoomView.prototype.startZoom = function (centerX, centerY) {\n  this.center.x = centerX;\n  this.center.y = centerY;\n  this.startShift.x = this.stage.x;\n  this.startShift.y = this.stage.y;\n  this.startScale.x = this.stage.scaleX;\n  this.startScale.y = this.stage.scaleY;\n};\n\nROS2D.ZoomView.prototype.zoom = function (zoom) {\n  // Make sure scale doesn't become too small\n  if (this.startScale.x * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.x;\n  }\n  if (this.startScale.y * zoom < this.minScale) {\n    zoom = this.minScale / this.startScale.y;\n  }\n\n  this.stage.scaleX = this.startScale.x * zoom;\n  this.stage.scaleY = this.startScale.y * zoom;\n\n  this.stage.x =\n    this.startShift.x -\n    (this.center.x - this.startShift.x) *\n      (this.stage.scaleX / this.startScale.x - 1);\n  this.stage.y =\n    this.startShift.y -\n    (this.center.y - this.startShift.y) *\n      (this.stage.scaleY / this.startScale.y - 1);\n};\n",["222","223"],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Map.jsx",["224"],"import React, {Component} from \"react\";\nimport Connection from \"./Connection\";\nimport Teleoperation from \"./Teleoperation\";\nimport Navigation from \"./Navigation\"\nimport RelayControl from \"./RelayControl\"\nimport {Row, Col, Container, Button} from \"react-bootstrap\"\n\nclass Map extends Component {\n    state = {\n        \n    };\n    render(){\n        return (\n        <div> \n            <Container>\n                <h1 className=\"text-center mt-3\">  Robot Control Page</h1>\n                <Row>\n                    <Col>\n                        <Connection />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Teleoperation />\n                        <RelayControl />\n                    </Col>\n                    <Col>\n                        <Navigation />\n                    </Col>\n                </Row>\n            </Container> \n\n        </div>\n        );\n    }\n\n}\nexport default Map;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Navigation.jsx",["225","226","227","228","229","230","231","232","233","234","235"],"import React, { Component } from \"react\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\"\nimport Config from '../scripts/config';\n\n//import NAV2D from \"react-nav2djs\";\n\nimport ROSLIB from 'roslib';\nimport NAV2D from 'react-nav2djs';\nimport ROS2D from \"./vendor/ros2d/src/Ros2D\";\n\n\n\nvar navigation = false;\nvar pathed = false;\nvar homing = false;\nvar MAP_WIDTH = (window.innerWidth)*0.65;\nvar MAP_HEIGHT = window.innerHeight - (window.innerHeight)*0.08;\n\nclass Navigation extends Component {\n    state = {\n        ros: null, \n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    };\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n\n\n\n\n\n\n\n\n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds\n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleOpen() {\n        console.log(\"hanle open\");\n\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n\n\n        relay_pub.publish(str);\n\n    }\n\n    handleClose() {\n        console.log(\"hanle close\");\n\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n\n\n        relay_pub.publish(str);\n    }\n\n    render() {\n        return(\n            <>\n                <Button variant=\"warning\" onClick={this.handleOpen}>Zoom In</Button>{' '}\n                <Button variant=\"warning\" onClick={this.handleClose}>Zoom Out</Button>{' '}\n            </>\n        );\n    }\n\n\n}\n\nexport default Navigation;","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RelayControl.jsx",["236","237","238","239","240","241","242","243","244"],"import React, { Component } from \"react\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\"\nimport Config from '../scripts/config';\n\n//import NAV2D from \"react-nav2djs\";\n//import ROS2D from 'ros2d';\nimport ROSLIB from 'roslib';\n\nvar navigation = false;\nvar pathed = false;\nvar homing = false;\nvar MAP_WIDTH = (window.innerWidth)*0.65;\nvar MAP_HEIGHT = window.innerHeight - (window.innerHeight)*0.08;\n\nclass RelayControl extends Component {\n    state = {\n        ros: null, \n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleOpen_1 = this.handleOpen_1.bind(this);\n        this.handleClose_1 = this.handleClose_1.bind(this);\n        this.handleOpen_2 = this.handleOpen_2.bind(this);\n        this.handleClose_2 = this.handleClose_2.bind(this);\n        this.handleOpen_3 = this.handleOpen_3.bind(this);\n        this.handleClose_3 = this.handleClose_3.bind(this);\n        this.handleOpen_4 = this.handleOpen_4.bind(this);\n        this.handleClose_4 = this.handleClose_4.bind(this);\n        this.handleOpen_5 = this.handleOpen_5.bind(this);\n        this.handleClose_5 = this.handleClose_5.bind(this);\n        this.handleOpen_6 = this.handleOpen_6.bind(this);\n        this.handleClose_6 = this.handleClose_6.bind(this);\n        this.handleOpen_7 = this.handleOpen_7.bind(this);\n        this.handleClose_7 = this.handleClose_7.bind(this);\n        this.handleOpen_8 = this.handleOpen_8.bind(this);\n        this.handleClose_8 = this.handleClose_8.bind(this);\n    };\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n\n\n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds\n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleOpen_1() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_1\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_1() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_1\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_2() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_2\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_2() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_2\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_3() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_3\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_3() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_3\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_4() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_4\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_4() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_4\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_5() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_5\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_5() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_5\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_6() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_6\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_6() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_6\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_7() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_7\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_7() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_7\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    handleOpen_8() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_8\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : true\n          });\n        relay_pub.publish(str);\n    }\n    handleClose_8() {\n        var relay_pub = new ROSLIB.Topic({\n            ros: this.state.ros,\n            name: \"/r5/open_relay_8\",\n            messageType: 'std_msgs/Bool',\n          });\n\n          var str = new ROSLIB.Message({\n            data : false\n          });\n        relay_pub.publish(str);\n    }\n\n    render() {\n        return(\n            <>\n                <div className = \"mb-5\"></div>\n                <h4 className = \"mb-2\">RELAY CONTROL</h4>\n                <Button variant=\"success\" onClick={this.handleOpen_1}>Relay 1</Button>{' '}\n                <Button variant=\"danger\"  onClick={this.handleClose_1} >Relay 1</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_2} >Relay 2</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_2}>Relay 2</Button>{' '}\n                <ol></ol> \n                <Button variant=\"success\" onClick={this.handleOpen_3}>Relay 3</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_3}>Relay 3</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_4}>Relay 4</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_4}>Relay 4</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_5}>Relay 5</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_5}>Relay 5</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_6}>Relay 6</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_6}>Relay 6</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_7}>Relay 7</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_7}>Relay 7</Button>{' '}\n                <ol></ol>\n                <Button variant=\"success\" onClick={this.handleOpen_8}>Relay 8</Button>{' '}\n                <Button variant=\"danger\" onClick={this.handleClose_8}>Relay 8</Button>{' '}\n            </>\n        );\n    }\n}\n\nexport default RelayControl;","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/vendor/ros2d/src/Ros2D.js",["245"],"/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n import ROSLIB from 'roslib';\n import createjs from 'createjs-module';\n\nvar ROS2D = ROS2D || {\n  REVISION : '0.9.0'\n};\n\n// convert the given global Stage coordinates to ROS coordinates\ncreatejs.Stage.prototype.globalToRos = function(x, y) {\n  var rosX = (x - this.x) / this.scaleX;\n  var rosY = (this.y - y) / this.scaleY;\n  return new ROSLIB.Vector3({\n    x : rosX,\n    y : rosY\n  });\n};\n\n// convert the given ROS coordinates to global Stage coordinates\ncreatejs.Stage.prototype.rosToGlobal = function(pos) {\n  var x = pos.x * this.scaleX + this.x;\n  var y = pos.y * this.scaleY + this.y;\n  return {\n    x : x,\n    y : y\n  };\n};\n\n// convert a ROS quaternion to theta in degrees\ncreatejs.Stage.prototype.rosQuaternionToGlobalTheta = function(orientation) {\n  // See https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Rotation_matrices\n  // here we use [x y z] = R * [1 0 0]\n  var q0 = orientation.w;\n  var q1 = orientation.x;\n  var q2 = orientation.y;\n  var q3 = orientation.z;\n  // Canvas rotation is clock wise and in degrees\n  return -Math.atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3)) * 180.0 / Math.PI;\n};\n",{"ruleId":"246","severity":2,"message":"247","line":8,"column":5,"nodeType":"248","messageId":"249","endLine":8,"endColumn":26},{"ruleId":"246","severity":2,"message":"247","line":9,"column":7,"nodeType":"248","messageId":"249","endLine":9,"endColumn":17},{"ruleId":"246","severity":2,"message":"247","line":10,"column":7,"nodeType":"248","messageId":"249","endLine":10,"endColumn":13},{"ruleId":"246","severity":2,"message":"247","line":11,"column":7,"nodeType":"248","messageId":"249","endLine":11,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":2,"column":33,"nodeType":"252","messageId":"253","endLine":2,"endColumn":45},{"ruleId":"250","severity":1,"message":"254","line":5,"column":30,"nodeType":"252","messageId":"253","endLine":5,"endColumn":36},{"ruleId":"250","severity":1,"message":"255","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":24},{"ruleId":"256","severity":1,"message":"257","line":19,"column":9,"nodeType":"258","messageId":"259","endLine":19,"endColumn":19},{"ruleId":"256","severity":1,"message":"257","line":18,"column":9,"nodeType":"258","messageId":"259","endLine":18,"endColumn":19},{"ruleId":"250","severity":1,"message":"260","line":2,"column":15,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"254","line":2,"column":31,"nodeType":"252","messageId":"253","endLine":2,"endColumn":37},{"ruleId":"256","severity":1,"message":"257","line":22,"column":9,"nodeType":"258","messageId":"259","endLine":22,"endColumn":19},{"ruleId":"261","severity":1,"message":"262","line":1,"column":13,"nodeType":"252","messageId":"263","endLine":1,"endColumn":18},{"ruleId":"264","severity":2,"message":"265","line":17,"column":49,"nodeType":"252","messageId":"266","endLine":17,"endColumn":57},{"ruleId":"264","severity":2,"message":"267","line":23,"column":22,"nodeType":"252","messageId":"266","endLine":23,"endColumn":27},{"ruleId":"250","severity":1,"message":"268","line":62,"column":9,"nodeType":"252","messageId":"253","endLine":62,"endColumn":24},{"ruleId":"264","severity":2,"message":"265","line":63,"column":49,"nodeType":"252","messageId":"266","endLine":63,"endColumn":57},{"ruleId":"264","severity":2,"message":"269","line":66,"column":28,"nodeType":"252","messageId":"266","endLine":66,"endColumn":34},{"ruleId":"264","severity":2,"message":"269","line":73,"column":25,"nodeType":"252","messageId":"266","endLine":73,"endColumn":31},{"ruleId":"264","severity":2,"message":"269","line":79,"column":25,"nodeType":"252","messageId":"266","endLine":79,"endColumn":31},{"ruleId":"264","severity":2,"message":"270","line":81,"column":9,"nodeType":"252","messageId":"266","endLine":81,"endColumn":15},{"ruleId":"264","severity":2,"message":"271","line":82,"column":9,"nodeType":"252","messageId":"266","endLine":82,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":92,"column":13,"nodeType":"252","messageId":"253","endLine":92,"endColumn":23},{"ruleId":"264","severity":2,"message":"269","line":95,"column":24,"nodeType":"252","messageId":"266","endLine":95,"endColumn":30},{"ruleId":"264","severity":2,"message":"267","line":111,"column":30,"nodeType":"252","messageId":"266","endLine":111,"endColumn":35},{"ruleId":"264","severity":2,"message":"265","line":114,"column":24,"nodeType":"252","messageId":"266","endLine":114,"endColumn":32},{"ruleId":"264","severity":2,"message":"271","line":127,"column":13,"nodeType":"252","messageId":"266","endLine":127,"endColumn":23},{"ruleId":"264","severity":2,"message":"265","line":136,"column":36,"nodeType":"252","messageId":"266","endLine":136,"endColumn":44},{"ruleId":"264","severity":2,"message":"267","line":143,"column":27,"nodeType":"252","messageId":"266","endLine":143,"endColumn":32},{"ruleId":"264","severity":2,"message":"265","line":146,"column":17,"nodeType":"252","messageId":"266","endLine":146,"endColumn":25},{"ruleId":"273","severity":1,"message":"274","line":155,"column":15,"nodeType":"275","messageId":"276","endLine":155,"endColumn":17},{"ruleId":"273","severity":1,"message":"274","line":155,"column":36,"nodeType":"275","messageId":"276","endLine":155,"endColumn":38},{"ruleId":"264","severity":2,"message":"269","line":164,"column":28,"nodeType":"252","messageId":"266","endLine":164,"endColumn":34},{"ruleId":"264","severity":2,"message":"267","line":193,"column":24,"nodeType":"252","messageId":"266","endLine":193,"endColumn":29},{"ruleId":"264","severity":2,"message":"269","line":201,"column":25,"nodeType":"252","messageId":"266","endLine":201,"endColumn":31},{"ruleId":"264","severity":2,"message":"271","line":236,"column":13,"nodeType":"252","messageId":"266","endLine":236,"endColumn":23},{"ruleId":"273","severity":1,"message":"274","line":236,"column":24,"nodeType":"275","messageId":"276","endLine":236,"endColumn":26},{"ruleId":"264","severity":2,"message":"270","line":236,"column":35,"nodeType":"252","messageId":"266","endLine":236,"endColumn":41},{"ruleId":"273","severity":1,"message":"274","line":236,"column":42,"nodeType":"275","messageId":"276","endLine":236,"endColumn":44},{"ruleId":"264","severity":2,"message":"269","line":242,"column":36,"nodeType":"252","messageId":"266","endLine":242,"endColumn":42},{"ruleId":"264","severity":2,"message":"269","line":255,"column":46,"nodeType":"252","messageId":"266","endLine":255,"endColumn":52},{"ruleId":"264","severity":2,"message":"267","line":257,"column":45,"nodeType":"252","messageId":"266","endLine":257,"endColumn":50},{"ruleId":"264","severity":2,"message":"265","line":260,"column":36,"nodeType":"252","messageId":"266","endLine":260,"endColumn":44},{"ruleId":"264","severity":2,"message":"269","line":296,"column":39,"nodeType":"252","messageId":"266","endLine":296,"endColumn":45},{"ruleId":"264","severity":2,"message":"269","line":312,"column":39,"nodeType":"252","messageId":"266","endLine":312,"endColumn":45},{"ruleId":"264","severity":2,"message":"269","line":319,"column":32,"nodeType":"252","messageId":"266","endLine":319,"endColumn":38},{"ruleId":"264","severity":2,"message":"271","line":324,"column":21,"nodeType":"252","messageId":"266","endLine":324,"endColumn":31},{"ruleId":"273","severity":1,"message":"274","line":324,"column":32,"nodeType":"275","messageId":"276","endLine":324,"endColumn":34},{"ruleId":"264","severity":2,"message":"270","line":327,"column":21,"nodeType":"252","messageId":"266","endLine":327,"endColumn":27},{"ruleId":"273","severity":1,"message":"274","line":327,"column":28,"nodeType":"275","messageId":"276","endLine":327,"endColumn":30},{"ruleId":"264","severity":2,"message":"271","line":331,"column":17,"nodeType":"252","messageId":"266","endLine":331,"endColumn":27},{"ruleId":"264","severity":2,"message":"270","line":337,"column":18,"nodeType":"252","messageId":"266","endLine":337,"endColumn":24},{"ruleId":"264","severity":2,"message":"271","line":337,"column":29,"nodeType":"252","messageId":"266","endLine":337,"endColumn":39},{"ruleId":"264","severity":2,"message":"277","line":342,"column":21,"nodeType":"252","messageId":"266","endLine":342,"endColumn":25},{"ruleId":"264","severity":2,"message":"278","line":355,"column":25,"nodeType":"252","messageId":"266","endLine":355,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":386,"column":49,"nodeType":"252","messageId":"266","endLine":386,"endColumn":57},{"ruleId":"264","severity":2,"message":"267","line":392,"column":22,"nodeType":"252","messageId":"266","endLine":392,"endColumn":27},{"ruleId":"261","severity":1,"message":"279","line":5,"column":13,"nodeType":"252","messageId":"263","endLine":5,"endColumn":18},{"ruleId":"264","severity":2,"message":"265","line":10,"column":1,"nodeType":"252","messageId":"266","endLine":10,"endColumn":9},{"ruleId":"264","severity":2,"message":"269","line":13,"column":14,"nodeType":"252","messageId":"266","endLine":13,"endColumn":20},{"ruleId":"264","severity":2,"message":"265","line":20,"column":1,"nodeType":"252","messageId":"266","endLine":20,"endColumn":9},{"ruleId":"264","severity":2,"message":"265","line":30,"column":1,"nodeType":"252","messageId":"266","endLine":30,"endColumn":9},{"ruleId":"264","severity":2,"message":"269","line":63,"column":19,"nodeType":"252","messageId":"266","endLine":63,"endColumn":25},{"ruleId":"264","severity":2,"message":"265","line":73,"column":3,"nodeType":"252","messageId":"266","endLine":73,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":87,"column":38,"nodeType":"252","messageId":"266","endLine":87,"endColumn":46},{"ruleId":"264","severity":2,"message":"265","line":112,"column":47,"nodeType":"252","messageId":"266","endLine":112,"endColumn":55},{"ruleId":"264","severity":2,"message":"265","line":115,"column":27,"nodeType":"252","messageId":"266","endLine":115,"endColumn":35},{"ruleId":"264","severity":2,"message":"269","line":118,"column":22,"nodeType":"252","messageId":"266","endLine":118,"endColumn":28},{"ruleId":"264","severity":2,"message":"280","line":140,"column":44,"nodeType":"252","messageId":"266","endLine":140,"endColumn":57},{"ruleId":"264","severity":2,"message":"269","line":162,"column":19,"nodeType":"252","messageId":"266","endLine":162,"endColumn":25},{"ruleId":"264","severity":2,"message":"265","line":204,"column":3,"nodeType":"252","messageId":"266","endLine":204,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":218,"column":43,"nodeType":"252","messageId":"266","endLine":218,"endColumn":51},{"ruleId":"264","severity":2,"message":"265","line":243,"column":47,"nodeType":"252","messageId":"266","endLine":243,"endColumn":55},{"ruleId":"264","severity":2,"message":"265","line":247,"column":26,"nodeType":"252","messageId":"266","endLine":247,"endColumn":34},{"ruleId":"264","severity":2,"message":"269","line":253,"column":22,"nodeType":"252","messageId":"266","endLine":253,"endColumn":28},{"ruleId":"264","severity":2,"message":"280","line":285,"column":49,"nodeType":"252","messageId":"266","endLine":285,"endColumn":62},{"ruleId":"264","severity":2,"message":"265","line":309,"column":47,"nodeType":"252","messageId":"266","endLine":309,"endColumn":55},{"ruleId":"264","severity":2,"message":"269","line":315,"column":24,"nodeType":"252","messageId":"266","endLine":315,"endColumn":30},{"ruleId":"264","severity":2,"message":"269","line":322,"column":30,"nodeType":"252","messageId":"266","endLine":322,"endColumn":36},{"ruleId":"264","severity":2,"message":"280","line":336,"column":52,"nodeType":"252","messageId":"266","endLine":336,"endColumn":65},{"ruleId":"264","severity":2,"message":"265","line":359,"column":44,"nodeType":"252","messageId":"266","endLine":359,"endColumn":52},{"ruleId":"264","severity":2,"message":"265","line":360,"column":40,"nodeType":"252","messageId":"266","endLine":360,"endColumn":48},{"ruleId":"264","severity":2,"message":"265","line":364,"column":22,"nodeType":"252","messageId":"266","endLine":364,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":383,"column":3,"nodeType":"252","messageId":"266","endLine":383,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":390,"column":5,"nodeType":"252","messageId":"266","endLine":390,"endColumn":13},{"ruleId":"264","severity":2,"message":"265","line":403,"column":40,"nodeType":"252","messageId":"266","endLine":403,"endColumn":48},{"ruleId":"250","severity":1,"message":"281","line":419,"column":7,"nodeType":"252","messageId":"253","endLine":419,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":425,"column":22,"nodeType":"252","messageId":"266","endLine":425,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":428,"column":24,"nodeType":"252","messageId":"266","endLine":428,"endColumn":32},{"ruleId":"264","severity":2,"message":"265","line":429,"column":22,"nodeType":"252","messageId":"266","endLine":429,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":438,"column":24,"nodeType":"252","messageId":"266","endLine":438,"endColumn":32},{"ruleId":"264","severity":2,"message":"265","line":439,"column":22,"nodeType":"252","messageId":"266","endLine":439,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":449,"column":3,"nodeType":"252","messageId":"266","endLine":449,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":451,"column":34,"nodeType":"252","messageId":"266","endLine":451,"endColumn":42},{"ruleId":"264","severity":2,"message":"265","line":473,"column":44,"nodeType":"252","messageId":"266","endLine":473,"endColumn":52},{"ruleId":"264","severity":2,"message":"265","line":474,"column":40,"nodeType":"252","messageId":"266","endLine":474,"endColumn":48},{"ruleId":"264","severity":2,"message":"265","line":478,"column":22,"nodeType":"252","messageId":"266","endLine":478,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":491,"column":3,"nodeType":"252","messageId":"266","endLine":491,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":498,"column":5,"nodeType":"252","messageId":"266","endLine":498,"endColumn":13},{"ruleId":"264","severity":2,"message":"265","line":511,"column":45,"nodeType":"252","messageId":"266","endLine":511,"endColumn":53},{"ruleId":"264","severity":2,"message":"265","line":537,"column":5,"nodeType":"252","messageId":"266","endLine":537,"endColumn":13},{"ruleId":"264","severity":2,"message":"265","line":558,"column":7,"nodeType":"252","messageId":"266","endLine":558,"endColumn":15},{"ruleId":"264","severity":2,"message":"265","line":581,"column":45,"nodeType":"252","messageId":"266","endLine":581,"endColumn":53},{"ruleId":"264","severity":2,"message":"265","line":600,"column":45,"nodeType":"252","messageId":"266","endLine":600,"endColumn":53},{"ruleId":"264","severity":2,"message":"265","line":603,"column":23,"nodeType":"252","messageId":"266","endLine":603,"endColumn":31},{"ruleId":"264","severity":2,"message":"265","line":622,"column":3,"nodeType":"252","messageId":"266","endLine":622,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":649,"column":39,"nodeType":"252","messageId":"266","endLine":649,"endColumn":47},{"ruleId":"264","severity":2,"message":"265","line":674,"column":26,"nodeType":"252","messageId":"266","endLine":674,"endColumn":34},{"ruleId":"264","severity":2,"message":"265","line":677,"column":27,"nodeType":"252","messageId":"266","endLine":677,"endColumn":35},{"ruleId":"264","severity":2,"message":"265","line":679,"column":27,"nodeType":"252","messageId":"266","endLine":679,"endColumn":35},{"ruleId":"264","severity":2,"message":"265","line":685,"column":29,"nodeType":"252","messageId":"266","endLine":685,"endColumn":37},{"ruleId":"264","severity":2,"message":"265","line":689,"column":28,"nodeType":"252","messageId":"266","endLine":689,"endColumn":36},{"ruleId":"264","severity":2,"message":"265","line":691,"column":24,"nodeType":"252","messageId":"266","endLine":691,"endColumn":32},{"ruleId":"264","severity":2,"message":"265","line":694,"column":3,"nodeType":"252","messageId":"266","endLine":694,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":708,"column":18,"nodeType":"252","messageId":"266","endLine":708,"endColumn":26},{"ruleId":"264","severity":2,"message":"265","line":751,"column":19,"nodeType":"252","messageId":"266","endLine":751,"endColumn":27},{"ruleId":"264","severity":2,"message":"265","line":828,"column":22,"nodeType":"252","messageId":"266","endLine":828,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":873,"column":22,"nodeType":"252","messageId":"266","endLine":873,"endColumn":30},{"ruleId":"264","severity":2,"message":"265","line":915,"column":22,"nodeType":"252","messageId":"266","endLine":915,"endColumn":30},{"ruleId":"264","severity":2,"message":"269","line":929,"column":17,"nodeType":"252","messageId":"266","endLine":929,"endColumn":23},{"ruleId":"264","severity":2,"message":"265","line":978,"column":43,"nodeType":"252","messageId":"266","endLine":978,"endColumn":51},{"ruleId":"264","severity":2,"message":"265","line":1000,"column":45,"nodeType":"252","messageId":"266","endLine":1000,"endColumn":53},{"ruleId":"264","severity":2,"message":"265","line":1012,"column":23,"nodeType":"252","messageId":"266","endLine":1012,"endColumn":31},{"ruleId":"264","severity":2,"message":"265","line":1022,"column":3,"nodeType":"252","messageId":"266","endLine":1022,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":1079,"column":40,"nodeType":"252","messageId":"266","endLine":1079,"endColumn":48},{"ruleId":"264","severity":2,"message":"265","line":1097,"column":34,"nodeType":"252","messageId":"266","endLine":1097,"endColumn":42},{"ruleId":"264","severity":2,"message":"269","line":1103,"column":23,"nodeType":"252","messageId":"266","endLine":1103,"endColumn":29},{"ruleId":"250","severity":1,"message":"281","line":1133,"column":7,"nodeType":"252","messageId":"253","endLine":1133,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":1147,"column":20,"nodeType":"252","messageId":"266","endLine":1147,"endColumn":28},{"ruleId":"264","severity":2,"message":"265","line":1156,"column":3,"nodeType":"252","messageId":"266","endLine":1156,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":1157,"column":3,"nodeType":"252","messageId":"266","endLine":1157,"endColumn":11},{"ruleId":"264","severity":2,"message":"265","line":1226,"column":34,"nodeType":"252","messageId":"266","endLine":1226,"endColumn":42},{"ruleId":"264","severity":2,"message":"269","line":1232,"column":21,"nodeType":"252","messageId":"266","endLine":1232,"endColumn":27},{"ruleId":"264","severity":2,"message":"269","line":1233,"column":25,"nodeType":"252","messageId":"266","endLine":1233,"endColumn":31},{"ruleId":"264","severity":2,"message":"269","line":1234,"column":25,"nodeType":"252","messageId":"266","endLine":1234,"endColumn":31},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"250","severity":1,"message":"254","line":6,"column":30,"nodeType":"252","messageId":"253","endLine":6,"endColumn":36},{"ruleId":"250","severity":1,"message":"286","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":13},{"ruleId":"250","severity":1,"message":"260","line":2,"column":15,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"287","line":2,"column":26,"nodeType":"252","messageId":"253","endLine":2,"endColumn":29},{"ruleId":"250","severity":1,"message":"288","line":8,"column":8,"nodeType":"252","messageId":"253","endLine":8,"endColumn":13},{"ruleId":"250","severity":1,"message":"289","line":9,"column":8,"nodeType":"252","messageId":"253","endLine":9,"endColumn":13},{"ruleId":"250","severity":1,"message":"290","line":13,"column":5,"nodeType":"252","messageId":"253","endLine":13,"endColumn":15},{"ruleId":"250","severity":1,"message":"291","line":14,"column":5,"nodeType":"252","messageId":"253","endLine":14,"endColumn":11},{"ruleId":"250","severity":1,"message":"292","line":15,"column":5,"nodeType":"252","messageId":"253","endLine":15,"endColumn":11},{"ruleId":"250","severity":1,"message":"293","line":16,"column":5,"nodeType":"252","messageId":"253","endLine":16,"endColumn":14},{"ruleId":"250","severity":1,"message":"294","line":17,"column":5,"nodeType":"252","messageId":"253","endLine":17,"endColumn":15},{"ruleId":"256","severity":1,"message":"257","line":32,"column":9,"nodeType":"258","messageId":"259","endLine":32,"endColumn":19},{"ruleId":"250","severity":1,"message":"286","line":2,"column":10,"nodeType":"252","messageId":"253","endLine":2,"endColumn":13},{"ruleId":"250","severity":1,"message":"260","line":2,"column":15,"nodeType":"252","messageId":"253","endLine":2,"endColumn":24},{"ruleId":"250","severity":1,"message":"287","line":2,"column":26,"nodeType":"252","messageId":"253","endLine":2,"endColumn":29},{"ruleId":"250","severity":1,"message":"290","line":9,"column":5,"nodeType":"252","messageId":"253","endLine":9,"endColumn":15},{"ruleId":"250","severity":1,"message":"291","line":10,"column":5,"nodeType":"252","messageId":"253","endLine":10,"endColumn":11},{"ruleId":"250","severity":1,"message":"292","line":11,"column":5,"nodeType":"252","messageId":"253","endLine":11,"endColumn":11},{"ruleId":"250","severity":1,"message":"293","line":12,"column":5,"nodeType":"252","messageId":"253","endLine":12,"endColumn":14},{"ruleId":"250","severity":1,"message":"294","line":13,"column":5,"nodeType":"252","messageId":"253","endLine":13,"endColumn":15},{"ruleId":"256","severity":1,"message":"257","line":42,"column":9,"nodeType":"258","messageId":"259","endLine":42,"endColumn":19},{"ruleId":"261","severity":1,"message":"279","line":7,"column":13,"nodeType":"252","messageId":"263","endLine":7,"endColumn":18},"react/react-in-jsx-scope","'React' must be in scope when using JSX","JSXOpeningElement","notInScope","no-unused-vars","'TabContainer' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'thisExpression' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Container' is defined but never used.","no-use-before-define","'NAV2D' was used before it was defined.","usedBeforeDefined","no-undef","'createjs' is not defined.","undef","'ROS2D' is not defined.","'withOrientation' is assigned a value but never used.","'ROSLIB' is not defined.","'homing' is not defined.","'navigation' is not defined.","'targetPath' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'pane' is not defined.","'paned' is not defined.","'ROS2D' was used before it was defined.","'EventEmitter2' is not defined.","'that' is assigned a value but never used.","no-native-reassign",["295"],"no-negated-in-lhs",["296"],"'Col' is defined but never used.","'Row' is defined but never used.","'NAV2D' is defined but never used.","'ROS2D' is defined but never used.","'navigation' is assigned a value but never used.","'pathed' is assigned a value but never used.","'homing' is assigned a value but never used.","'MAP_WIDTH' is assigned a value but never used.","'MAP_HEIGHT' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]