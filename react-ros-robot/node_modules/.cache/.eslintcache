[{"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js":"1","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js":"2","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js":"3","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx":"4","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx":"5","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx":"6","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx":"7","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx":"8","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx":"9","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js":"10","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx":"11","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx":"12"},{"size":544,"mtime":1620138920361,"results":"13","hashOfConfig":"14"},{"size":271,"mtime":1620141134475,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1619338743456,"results":"16","hashOfConfig":"14"},{"size":644,"mtime":1620143415564,"results":"17","hashOfConfig":"14"},{"size":608,"mtime":1620143415564,"results":"18","hashOfConfig":"14"},{"size":303,"mtime":1620143415564,"results":"19","hashOfConfig":"14"},{"size":1102,"mtime":1620248235978,"results":"20","hashOfConfig":"14"},{"size":392,"mtime":1620143415564,"results":"21","hashOfConfig":"14"},{"size":1820,"mtime":1619463111539,"results":"22","hashOfConfig":"14"},{"size":279,"mtime":1620248161238,"results":"23","hashOfConfig":"14"},{"size":3006,"mtime":1620244558518,"results":"24","hashOfConfig":"14"},{"size":4052,"mtime":1620248772030,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"xjyrod",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js",[],["55","56"],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx",["57"],"import React, { Component } from \"react\";\nimport {Container, Navbar, Nav, TabContainer} from \"react-bootstrap\";\n\nclass Header extends Component {\n  render() {\n    return ( \n    <Container>\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n    <Navbar.Brand href=\"#home\">React Ros Robot</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"/\">Home</Nav.Link>\n        <Nav.Link href=\"/About\">About</Nav.Link>\n      </Nav>\n\n    </Navbar.Collapse>\n  </Navbar>\n  </Container>\n  \n   );\n  }\n}\n\nexport default Header;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx",["58"],"import React, {Component} from \"react\";\nimport Connection from \"./Connection\";\nimport Teleoperation from \"./Teleoperation\";\nimport RobotState from \"./RobotState\"\nimport {Row, Col, Container, Button} from \"react-bootstrap\"\n\n\n\nclass Home extends Component {\n    state = {\n        \n    };\n    render(){\n        return (\n        <div> \n            <Container>\n                <h1 className=\"text-center mt-3\">  Robot Control Page</h1>\n                <Row>\n                    <Col>\n                        <Connection />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Teleoperation />\n                    </Col>\n                    <Col>\n                        <h1>MAP</h1>\n                        <p>This region will be used later for displaying a map</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <RobotState />\n                    </Col>\n                </Row>\n            </Container> \n\n        </div>\n        );\n    }\n\n}\n\nexport default Home;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx",["59","60"],"import { thisExpression } from '@babel/types';\nimport React, {Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\n\nclass Connection extends Component {\n    state = {\n        connected: false,\n        ros: null\n    }\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n\n\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <Alert className=\"text-center m-3\" variant={this.state.connected ? \"success\": \"danger\"}>\n                    {this.state.connected? \"Robot connected\" : \"Robot disconnected\"}\n                </Alert>\n                \n            </div>\n        );\n    }\n  \n}\n\nexport default Connection;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx",["61"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from '../scripts/config';\n\n\nclass Teleoperation extends Component {\n\n    state = { ros: null };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleMove(event) {\n        console.log(\"hanle move\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    handleStop(event) {\n        console.log(\"hanle stop\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    render() {\n        return <div>\n            <Joystick\n                size={100}\n                baseColor=\"black\"\n                stickColor=\"orange\"\n                move={this.handleMove}\n                stop={this.handleStop}\n            ></Joystick>\n        </div>;\n    }\n}\n\nexport default Teleoperation;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx",["62","63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":33,"nodeType":"71","messageId":"72","endLine":2,"endColumn":45},{"ruleId":"69","severity":1,"message":"73","line":5,"column":30,"nodeType":"71","messageId":"72","endLine":5,"endColumn":36},{"ruleId":"69","severity":1,"message":"74","line":1,"column":10,"nodeType":"71","messageId":"72","endLine":1,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":19,"column":9,"nodeType":"77","messageId":"78","endLine":19,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":18,"column":9,"nodeType":"77","messageId":"78","endLine":18,"endColumn":19},{"ruleId":"69","severity":1,"message":"79","line":2,"column":15,"nodeType":"71","messageId":"72","endLine":2,"endColumn":24},{"ruleId":"69","severity":1,"message":"73","line":2,"column":31,"nodeType":"71","messageId":"72","endLine":2,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":22,"column":9,"nodeType":"77","messageId":"78","endLine":22,"endColumn":19},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'TabContainer' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'thisExpression' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]