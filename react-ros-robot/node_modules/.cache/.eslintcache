[{"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js":"1","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js":"2","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js":"3","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx":"4","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx":"5","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx":"6","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx":"7","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx":"8","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx":"9","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js":"10","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx":"11","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx":"12","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Map.jsx":"13"},{"size":544,"mtime":1620138920361,"results":"14","hashOfConfig":"15"},{"size":271,"mtime":1620141134475,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1619338743456,"results":"17","hashOfConfig":"15"},{"size":688,"mtime":1620485551662,"results":"18","hashOfConfig":"15"},{"size":702,"mtime":1620485487702,"results":"19","hashOfConfig":"15"},{"size":303,"mtime":1620143415564,"results":"20","hashOfConfig":"15"},{"size":1102,"mtime":1620485339319,"results":"21","hashOfConfig":"15"},{"size":392,"mtime":1620143415564,"results":"22","hashOfConfig":"15"},{"size":1820,"mtime":1619463111539,"results":"23","hashOfConfig":"15"},{"size":279,"mtime":1620485339319,"results":"24","hashOfConfig":"15"},{"size":3006,"mtime":1620485339319,"results":"25","hashOfConfig":"15"},{"size":4052,"mtime":1620485339319,"results":"26","hashOfConfig":"15"},{"size":1097,"mtime":1620485511354,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"xjyrod",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/index.js",[],["59","60"],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/App.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/reportWebVitals.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Header.jsx",["61"],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Body.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Footer.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Home.jsx",["62"],"import React, {Component} from \"react\";\nimport Connection from \"./Connection\";\nimport Teleoperation from \"./Teleoperation\";\nimport RobotState from \"./RobotState\"\nimport {Row, Col, Container, Button} from \"react-bootstrap\"\n\n\n\nclass Home extends Component {\n    state = {\n        \n    };\n    render(){\n        return (\n        <div> \n            <Container>\n                <h1 className=\"text-center mt-3\">  Robot Control Page</h1>\n                <Row>\n                    <Col>\n                        <Connection />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Teleoperation />\n                    </Col>\n                    <Col>\n                        <h1>MAP</h1>\n                        <p>This region will be used later for displaying a map</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <RobotState />\n                    </Col>\n                </Row>\n            </Container> \n\n        </div>\n        );\n    }\n\n}\n\nexport default Home;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/About.jsx",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Connection.jsx",["63","64"],"import { thisExpression } from '@babel/types';\nimport React, {Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\n\nclass Connection extends Component {\n    state = {\n        connected: false,\n        ros: null\n    }\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established!\");\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n\n\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <Alert className=\"text-center m-3\" variant={this.state.connected ? \"success\": \"danger\"}>\n                    {this.state.connected? \"Robot connected\" : \"Robot disconnected\"}\n                </Alert>\n                \n            </div>\n        );\n    }\n  \n}\n\nexport default Connection;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/scripts/config.js",[],"/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Teleoperation.jsx",["65"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from '../scripts/config';\n\n\nclass Teleoperation extends Component {\n\n    state = { ros: null };\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    // methods\n    handleMove(event) {\n        console.log(\"hanle move\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    handleStop(event) {\n        console.log(\"hanle stop\");\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC,\n            messageType: \"geometry_msgs/Twist\",\n        });\n\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n\n        cmd_vel.publish(twist)\n    }\n\n    render() {\n        return <div>\n            <Joystick\n                size={100}\n                baseColor=\"black\"\n                stickColor=\"orange\"\n                move={this.handleMove}\n                stop={this.handleStop}\n            ></Joystick>\n        </div>;\n    }\n}\n\nexport default Teleoperation;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/RobotState.jsx",["66","67","68"],"import React, { Component } from \"react\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\"\nimport Config from '../scripts/config';\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        orientation:0,\n        linear:0,\n        angular:0,\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    };\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n        \n        this.state.ros.on(\"connection\", () => {\n            console.log(\"connection established in Teleoperation Companenet!\");\n            console.log(this.state.ros);\n            this.setState({ connected: true});\n\n        });\n\n        this.state.ros.on(\"close\", () => {\n            console.log(\"connection closed!\");\n            this.setState({ connected: false});\n\n            //try to reconnect every 3 seconds \n            setTimeout(() => {\n                try{\n                    this.state.ros.connect(\"ws://\"+\n                    Config.ROSBRIDGE_SERVER_IP+\":\"+\n                    Config.ROSBRIDGE_SERVER_PORT+\"\"\n                    );\n                }catch (error){\n                    console.log(\"connection problem\");\n                }\n            }, Config.RECONNECTION_TIMER);\n\n        });\n        try{\n            this.state.ros.connect(\"ws://\"+\n            Config.ROSBRIDGE_SERVER_IP+\":\"+\n            Config.ROSBRIDGE_SERVER_PORT+\"\"\n            );\n        }catch (error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    componentDidMount(){\n        this.getRobotState();\n    }\n\n    getRobotState(){\n        // pose subscriber\n        var pos_sub = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.POSE_TOPIC,\n            messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n            \n        });\n\n        // pose callback\n        pos_sub.subscribe((message)=>{\n            this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n            this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n            this.setState({ orientation: this.getOrientationFromQuaternion(\n                message.pose.pose.orientation\n                ).toFixed(2), \n            });\n        });\n\n        // subscribe for velocity in odom\n        var vel_sub = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.ODOM_TOPIC,\n            messageType: \"nav_msgs/Odometry\",\n            \n        });\n\n        // vel callback\n        vel_sub.subscribe((message)=>{\n            this.setState({ linear: message.twist.twist.linear.x.toFixed(2) });\n            this.setState({ angular: message.twist.twist.angular.z.toFixed(2) });\n        });\n    }\n\n    getOrientationFromQuaternion(ros_orientation_quaterternion){\n        var q = new Three.Quaternion(\n                ros_orientation_quaterternion.x, \n                ros_orientation_quaterternion.y, \n                ros_orientation_quaterternion.z, \n                ros_orientation_quaterternion.w\n        );\n            // convert roll pitch yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"] + (180 / Math.PI);\n    }\n\n    render() {\n        return(\n            <div>\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\"> Position:</h4>\n                        <p className=\"mt-0\">x: {this.state.x}</p>\n                        <p className=\"mt-0\">y: {this.state.y}</p>\n                        <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h4 className=\"mt-4\"> Velocities</h4>\n                        <p className=\"mt-0\">Linear: {this.state.linear}</p>\n                        <p className=\"mt-0\">Angular: {this.state.angular}</p>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default RobotState;\n","/home/salih/ros_workspace/ros_web_interface/src/udemy_course/react-ros-robot/src/components/Map.jsx",["69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":33,"nodeType":"76","messageId":"77","endLine":2,"endColumn":45},{"ruleId":"74","severity":1,"message":"78","line":5,"column":30,"nodeType":"76","messageId":"77","endLine":5,"endColumn":36},{"ruleId":"74","severity":1,"message":"79","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"80","severity":1,"message":"81","line":19,"column":9,"nodeType":"82","messageId":"83","endLine":19,"endColumn":19},{"ruleId":"80","severity":1,"message":"81","line":18,"column":9,"nodeType":"82","messageId":"83","endLine":18,"endColumn":19},{"ruleId":"74","severity":1,"message":"84","line":2,"column":15,"nodeType":"76","messageId":"77","endLine":2,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":2,"column":31,"nodeType":"76","messageId":"77","endLine":2,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":22,"column":9,"nodeType":"82","messageId":"83","endLine":22,"endColumn":19},{"ruleId":"74","severity":1,"message":"78","line":5,"column":30,"nodeType":"76","messageId":"77","endLine":5,"endColumn":36},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'TabContainer' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'thisExpression' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]